<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans          
    http://www.springframework.org/schema/beans/spring-beans.xsd          
    http://www.springframework.org/schema/security          
    http://www.springframework.org/schema/security/spring-security.xsd">


	<!--开启@secured注解-->
	<!--开启表达式注解@PreAuthorize-->
	<security:global-method-security pre-post-annotations="enabled" jsr250-annotations="enabled" secured-annotations="enabled"/>
    
    <!-- 配置不拦截的资源 -->
	<!--登录与失败页面-->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
	<!--静态资源-->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <security:http pattern="/js/**" security="none"/>
	<!--网站小图标-->
    <security:http pattern="/favicon.ico" security="none"/>

    <!-- 
    	配置具体的规则 
    	auto-config="true"		会配置默认的十个过滤器
    	use-expressions="false"	是否使用SPEL表达式（没学习过）
    -->
    <security:http auto-config="true" use-expressions="true">
    	<!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" -->
	<security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>

	<!-- 定义跳转的具体的页面  如果页面请求name为username和password,则parameter可以不写-->
	<security:form-login
		login-page="/login.jsp"
		login-processing-url="/login.do"
		always-use-default-target="true"
		default-target-url="/index.jsp"
		authentication-failure-url="/failer.jsp"
		username-parameter="username"
		password-parameter="password"
	/>
    	
    	<!-- 关闭跨域请求 -->
	<security:csrf disabled="true"/>

	<!-- 退出 -->
	<security:logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/login.jsp" />
    	
    </security:http>
    
    <!-- 认证管理器   切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
    	<security:authentication-provider user-service-ref="userService">
    		<!-- 配置加密的方式 -->
    		<security:password-encoder ref="passwordEncoder"/>
    	</security:authentication-provider>
    </security:authentication-manager>
    
    <!-- 配置加密类 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<!--<bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>-->

 </beans>   
 
 
 
 
 
 
 
 
 
 
 
 
 